name: CI

on:
  workflow_dispatch:
  merge_group:
    types: [checks_requested]
  pull_request:
    branches: [master]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name != 'push' }}

jobs:
  build-slang:
    strategy:
      matrix:
        config: [release]
        include:
          - config: release 
            warnings-as-errors: true
            enable-debug-layers: true
            test-category: full  
            full-gpu-tests: true
            server-count: 8
      fail-fast: false
    runs-on: ["Windows", "self-hosted", "GCP-T4", "test"]

    defaults:
      run:
        shell: bash

    outputs:
      should-run-release: ${{ steps.filter.outputs.should-run }}

    steps:
      - name: Add bash to PATH
        shell: pwsh
        run: |
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\bin"
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\usr\\bin"

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: "2"
          
      - id: filter
        run: |
          # This step prevents subsequent steps from running if only documentation was changed
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            BASE=origin/${{ github.base_ref }}
          else
            BASE=HEAD^1
          fi
          if git diff --name-only -z $BASE...HEAD | 
            grep --null-data -qvE '^(docs/|LICENSES/|LICENSE$|CONTRIBUTING\.md$|README\.md$)'; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "Only documentation files changed, skipping remaining steps"
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup
        if: steps.filter.outputs.should-run == 'true'
        uses: ./.github/actions/common-setup
        with:
          os: windows
          compiler: cl
          platform: x86_64
          config: ${{matrix.config}}
          build-llvm: true

      # Don't need to check this on every config
      - name: Check Stable Names Table
        if: ${{ matrix.config == 'linux' && matrix.config == 'debug' }}
        run: ./extras/check-ir-stable-names-gh-actions.sh

      - name: Check Version Constants
        id: check-ir-versions
        if: ${{ matrix.config == 'debug' && github.event_name == 'pull_request' && steps.filter.outputs.should-run == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: ./extras/check-inst-version-changes.sh

      - name: Upload IR version check results
        if: ${{ steps.check-versions.outputs.artifact_created == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ir-version-check-results
          path: ir-version-check-artifact/
          retention-days: 1

      - name: Build Slang
        if: steps.filter.outputs.should-run == 'true'
        run: |
          echo "cmake version: $(cmake --version)"
          # Setup ccache compiler launchers for MSVC
          export CMAKE_C_COMPILER_LAUNCHER="${{ env.ccache_symlinks_path }}"
          export CMAKE_CXX_COMPILER_LAUNCHER="${{ env.ccache_symlinks_path }}"
          
          if [[ "${{ matrix.config }}" != "release" && "${{ matrix.config }}" != "releaseWithDebugInfo" ]]; then
            # Doing a debug build will try to link against a release built llvm, this
            # is a problem on Windows, so make slang-llvm in release build and use
            # that as though it's a fetched binary via these presets.
            cmake --workflow --preset slang-llvm
            # Configure, pointing to our just-generated slang-llvm archive
            cmake --preset default --fresh \
              -DSLANG_SLANG_LLVM_FLAVOR=FETCH_BINARY \
              "-DSLANG_SLANG_LLVM_BINARY_URL=$(pwd)/build/dist-release/slang-llvm.zip" \
              "-DCMAKE_COMPILE_WARNING_AS_ERROR=${{matrix.warnings-as-errors}}" \
              "-DCMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER}" \
              "-DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}" \
              -DSLANG_ENABLE_TESTS=ON
            cmake --workflow --preset "${{matrix.config}}"
          else
            # Otherwise, use the "system" llvm we have just build or got from the
            # cache in the setup phase
            cmake --preset default --fresh \
              -DSLANG_SLANG_LLVM_FLAVOR=USE_SYSTEM_LLVM \
              -DCMAKE_COMPILE_WARNING_AS_ERROR=${{matrix.warnings-as-errors}} \
              "-DCMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER}" \
              "-DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}" \
              -DSLANG_ENABLE_TESTS=ON
            cmake --workflow --preset "${{matrix.config}}"
          fi

      - name: Check documented compiler versions
        if: steps.filter.outputs.should-run == 'true'
        run: bash extras/verify-documented-compiler-version.sh

      - name: Setup environment variables
        if: steps.filter.outputs.should-run == 'true'
        run: |
          echo "bin_dir=$(pwd)/build/dist-${{matrix.config}}/bin" >> $GITHUB_ENV

      - name: Upload build artifacts for test jobs
        if: steps.filter.outputs.should-run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: slang-build-windows-${{matrix.config}}
          path: |
            build/dist-${{matrix.config}}/
            tests/
            tools/
            extras/
            external/spirv-tools/
            external/vulkan/
          retention-days: 1

  test-slang:
    needs: build-slang
    if: needs.build-slang.outputs.should-run-release == 'true'
    strategy:
      matrix:
        config: [release]
        include:
          - config: release
            test-category: full
            full-gpu-tests: true
            server-count: 8
      fail-fast: false
    runs-on: ["Windows", "self-hosted", "GCP-T4"]

    defaults:
      run:
        shell: bash

    steps:
      - name: Add bash to PATH
        shell: pwsh
        run: |
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\bin"
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\usr\\bin"

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: "2"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: slang-build-windows-${{matrix.config}}
          path: ./

      - name: Setup environment variables
        run: |
          # Extract the slang.zip file to get the binaries
          cd build/dist-${{matrix.config}}
          unzip -q slang.zip
          cd ../../
          echo "bin_dir=$(pwd)/build/dist-${{matrix.config}}/bin" >> $GITHUB_ENV

      - name: Test Slang
        run: |
          smokeResult=$("$bin_dir/slang-test" tests/render/check-backend-support-on-ci.slang)
          supportedBackends="$(echo "$smokeResult" | grep 'Supported backends: ')"

          # LLVM is required to run the filecheck
          echo "Checking llvm ..." && echo "$supportedBackends" | grep -q llvm

          if [[ "${{matrix.full-gpu-tests}}" == "true" ]]
          then
            for backend in fxc dxc glslang visualstudio genericcpp nvrtc metal tint # clang gcc
            do
              echo "Checking $backend ..." && echo "$supportedBackends" | grep -q "$backend"
            done
            for api in 'vk,vulkan' 'dx12,d3d12' 'dx11,d3d11' 'cuda' 'wgpu,webgpu'
            do
              echo "Checking $api ..." && echo "$smokeResult" | grep -q "Check $api: Supported"
            done
            echo "Printing CUDA version: ..." && nvcc --version
            echo "Printing Vulkan SDK version: ..." && vulkaninfo | grep -i version
          fi

          export SLANG_RUN_SPIRV_VALIDATION=1
          export SLANG_USE_SPV_SOURCE_LANGUAGE_UNKNOWN=1
          "$bin_dir/slang-test" \
            -use-test-server \
            -server-count ${{ matrix.server-count }} \
            -category ${{ matrix.test-category }} \
            -expected-failure-list tests/expected-failure-github.txt \
            -skip-reference-image-generation \
            -show-adapter-info \
            -enable-debug-layers true

      - name: Cleanup artifacts
        if: always()
        run: |
          rm -rf build/ tests/ tools/ extras/

  test-examples:
    needs: build-slang
    if: needs.build-slang.outputs.should-run-release == 'true' && github.event_name == 'pull_request'
    strategy:
      matrix:
        config: [release]
        include:
          - config: release
            full-gpu-tests: true
      fail-fast: false
    runs-on: ["Windows", "self-hosted", "GCP-T4"]

    defaults:
      run:
        shell: bash

    steps:
      - name: Add bash to PATH
        shell: pwsh
        run: |
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\bin"
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\usr\\bin"

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: "2"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: slang-build-windows-${{matrix.config}}
          path: ./

      - name: Setup environment variables
        run: |
          # Extract the slang.zip file to get the binaries
          cd build/dist-${{matrix.config}}
          unzip -q slang.zip
          cd ../../
          echo "bin_dir=$(pwd)/build/dist-${{matrix.config}}/bin" >> $GITHUB_ENV

      - name: Run Slang examples
        run: |
          .github/workflows/ci-examples.sh \
           --bin-dir "$bin_dir" \
           --os "windows" \
           --platform "x86_64" \
           --config "${{matrix.config}}" \
           --skip-file tests/expected-example-failure-github.txt

      - name: Cleanup artifacts
        if: always()
        run: |
          rm -rf build/ tests/ tools/ extras/

  test-slangc:
    needs: build-slang
    if: needs.build-slang.outputs.should-run-release == 'true'
    strategy:
      matrix:
        config: [release]
      fail-fast: false
    runs-on: ["Windows", "self-hosted", "GCP-T4"]

    defaults:
      run:
        shell: bash

    steps:
      - name: Add bash to PATH
        shell: pwsh
        run: |
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\bin"
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\usr\\bin"

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: "2"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: slang-build-windows-${{matrix.config}}
          path: ./

      - name: Setup environment variables
        run: |
          # Extract the slang.zip file to get the binaries
          cd build/dist-${{matrix.config}}
          unzip -q slang.zip
          cd ../../
          echo "bin_dir=$(pwd)/build/dist-${{matrix.config}}/bin" >> $GITHUB_ENV

      - name: Run slangc tests
        run: |
          PATH=$bin_dir:$PATH tools/slangc-test/test.sh

      - name: Cleanup artifacts
        if: always()
        run: |
          rm -rf build/ tests/ tools/ extras/

  test-glsl:
    needs: build-slang
    if: needs.build-slang.outputs.should-run-release == 'true' && github.event_name == 'pull_request'
    strategy:
      matrix:
        config: [release]
        include:
          - config: release
            test-category: full
            full-gpu-tests: true
            server-count: 8
      fail-fast: false
    runs-on: ["Windows", "self-hosted", "GCP-T4"]

    defaults:
      run:
        shell: bash

    steps:
      - name: Add bash to PATH
        shell: pwsh
        run: |
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\bin"
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\usr\\bin"

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: "2"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: slang-build-windows-${{matrix.config}}
          path: ./

      - name: Setup environment variables
        run: |
          # Extract the slang.zip file to get the binaries
          cd build/dist-${{matrix.config}}
          unzip -q slang.zip
          cd ../../
          echo "bin_dir=$(pwd)/build/dist-${{matrix.config}}/bin" >> $GITHUB_ENV

      - name: Test Slang via glsl
        run: |
          export SLANG_RUN_SPIRV_VALIDATION=1
          export SLANG_USE_SPV_SOURCE_LANGUAGE_UNKNOWN=1
          "$bin_dir/slang-test" \
            -use-test-server \
            -server-count ${{ matrix.server-count }} \
            -category ${{ matrix.test-category }} \
            -emit-spirv-via-glsl \
            -api vk \
            -expected-failure-list tests/expected-failure-via-glsl.txt \
            -skip-reference-image-generation \
            -show-adapter-info

      - name: Cleanup artifacts
        if: always()
        run: |
          rm -rf build/ tests/ tools/ extras/

  test-rhi:
    needs: build-slang
    if: needs.build-slang.outputs.should-run-release == 'true'
    strategy:
      matrix:
        config: [release]
        include:
          - config: release
            full-gpu-tests: true
      fail-fast: false
    runs-on: ["Windows", "self-hosted", "GCP-T4"]

    defaults:
      run:
        shell: bash

    steps:
      - name: Add bash to PATH
        shell: pwsh
        run: |
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\bin"
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\usr\\bin"

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: "2"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: slang-build-windows-${{matrix.config}}
          path: ./

      - name: Setup environment variables
        run: |
          # Extract the slang.zip file to get the binaries
          cd build/dist-${{matrix.config}}
          unzip -q slang.zip
          cd ../../
          echo "bin_dir=$(pwd)/build/dist-${{matrix.config}}/bin" >> $GITHUB_ENV

      - name: Run slang-rhi tests
        run: |
          "$bin_dir/slang-rhi-tests" -check-devices -tce=cmd-clear*,cmd-copy*,cmd-upload*,fence*,staging-heap*,texture-create*

      - name: Cleanup artifacts
        if: always()
        run: |
          rm -rf build/ tests/ tools/ extras/

  test-slangpy:
    needs: build-slang
    if: needs.build-slang.outputs.should-run-release == 'true'
    strategy:
      matrix:
        config: [release]
        include:
          - config: release
            full-gpu-tests: true
      fail-fast: false
    runs-on: ["Windows", "self-hosted", "GCP-T4"]

    defaults:
      run:
        shell: bash

    steps:
      - name: Add bash to PATH
        shell: pwsh
        run: |
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\bin"
          Add-Content -Path $env:GITHUB_PATH -Value "C:\\Program Files\\Git\\usr\\bin"

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: "2"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: slang-build-windows-${{matrix.config}}
          path: ./

      - name: Setup environment variables
        run: |
          # Extract the slang.zip file to get the binaries
          cd build/dist-${{matrix.config}}
          unzip -q slang.zip
          cd ../../
          echo "bin_dir=$(pwd)/build/dist-${{matrix.config}}/bin" >> $GITHUB_ENV

      - name: Run slangpy tests
        shell: pwsh
        run: |
          python --version
          Write-Host "Cleaning up existing installations and installing slangpy..."
          try {
            $SLANGPY_LOCATION = python -c "import slangpy; print(slangpy.__file__.rsplit('\\', 2)[0])"
            Start-Process -FilePath "python" -ArgumentList "-m pip uninstall -y slangpy" -Verb RunAs -Wait
            if (Test-Path $SLANGPY_LOCATION) {
              Write-Host "Removing existing slangpy directory at: $SLANGPY_LOCATION"
              Remove-Item -Path $SLANGPY_LOCATION -Recurse -Force
            }
          } catch {
            Write-Host "slangpy not found or already removed"
          }
          python -m pip install --verbose slangpy --user
          $SITE_PACKAGES = python -c "import slangpy; print(slangpy.__file__.rsplit('\\', 2)[0])"
          $bin_dir = $env:bin_dir -replace '^/c/', 'C:\' -replace '/', '\'
          Write-Host "Site packages directory: $SITE_PACKAGES"
          Write-Host "bin_dir location: $bin_dir"
          try {
            Copy-Item -Path "$bin_dir\slang*.dll" -Destination "$SITE_PACKAGES\slangpy\" -Force -ErrorAction Stop
          } catch {
            Write-Error "Failed to copy library files: $_"
            exit 1
          }
          Write-Host "Listing files in slangpy directory..."
          Get-ChildItem -Path "$SITE_PACKAGES\slangpy" | ForEach-Object { Write-Host "$($_.Name) - Last Modified: $($_.LastWriteTime)" }
          Write-Host "Running pytest on slangpy tests..."
          $env:PYTHONPATH = "$SITE_PACKAGES"
          # Disable some slangpy tests temporarily. This should be enabled back when https://github.com/shader-slang/slangpy/issues/274 is closed.
          python -m pytest "$SITE_PACKAGES\slangpy\tests" -v -k "not (test_nested_structs and DeviceType.cuda) and not (test_cursor_read_write and DeviceType.cuda) and not (test_fill_from_kernel and DeviceType.cuda) and not (test_wrap_buffer and DeviceType.cuda) and not (test_apply_changes and DeviceType.cuda) and not (test_shader_cursor and DeviceType.cuda)"

      - name: Cleanup artifacts
        if: always()
        run: |
          rm -rf build/ tests/ tools/ extras/
